'use client'

import { useEffect, useState } from 'react'
import { ReportData } from '@/types'
import { formatDate } from '@/lib/utils'
import { ReportChart } from '@/components/report-chart'

interface ReportPageProps {
  params: {
    id: string
  }
}

export default function ReportPage({ params }: ReportPageProps) {
  const [reportData, setReportData] = useState<ReportData | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    fetchReport()
  }, [params.id])

  const fetchReport = async () => {
    try {
      const response = await fetch(`/api/report/${params.id}`)
      if (response.ok) {
        const data = await response.json()
        setReportData(data.reportData)
      } else {
        setError('Report not found')
      }
    } catch (err) {
      setError('Error loading report')
    } finally {
      setLoading(false)
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading report...</p>
        </div>
      </div>
    )
  }

  if (error || !reportData) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-destructive mb-2">Report Not Found</h1>
          <p className="text-muted-foreground">
            {error || 'The requested report could not be found.'}
          </p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8 max-w-4xl">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold mb-2">
            {reportData.config.platform.toUpperCase()} Insight Report
          </h1>
          <div className="flex flex-wrap gap-4 text-sm text-muted-foreground">
            <span>Generated: {formatDate(new Date(reportData.generatedAt))}</span>
            <span>•</span>
            <span>Level: {reportData.config.level}</span>
            <span>•</span>
            <span>Date Range: {reportData.config.dateRangeEnum}</span>
            <span>•</span>
            <span>Metrics: {reportData.config.metrics.join(', ')}</span>
          </div>
        </div>

        {/* Summary */}
        <div className="bg-card rounded-lg border p-6 mb-8">
          <h2 className="text-xl font-semibold mb-4">Executive Summary</h2>
          <div className="bg-muted/50 p-4 rounded-lg">
            <pre className="text-sm whitespace-pre-wrap font-mono">
              {reportData.summary}
            </pre>
          </div>
        </div>

        {/* Chart */}
        <div className="bg-card rounded-lg border p-6 mb-8">
          <h2 className="text-xl font-semibold mb-4">Performance Chart</h2>
          <ReportChart data={reportData.data} metrics={reportData.config.metrics} />
        </div>

        {/* Data Table */}
        <div className="bg-card rounded-lg border p-6">
          <h2 className="text-xl font-semibold mb-4">Raw Data</h2>
          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead>
                <tr className="border-b">
                  {reportData.config.metrics.map((metric) => (
                    <th key={metric} className="text-left p-2 font-medium">
                      {metric.replace(/_/g, ' ')}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {reportData.data.slice(0, 20).map((row, index) => (
                  <tr key={index} className="border-b">
                    {reportData.config.metrics.map((metric) => (
                      <td key={metric} className="p-2">
                        {typeof row[metric] === 'number' 
                          ? row[metric].toLocaleString() 
                          : row[metric] || 'N/A'
                        }
                      </td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
            {reportData.data.length > 20 && (
              <p className="text-muted-foreground text-sm mt-4">
                Showing first 20 rows of {reportData.data.length} total rows.
              </p>
            )}
          </div>
        </div>

        {/* Footer */}
        <div className="mt-8 text-center text-sm text-muted-foreground">
          <p>Generated by Insights Platform</p>
        </div>
      </div>
    </div>
  )
}
